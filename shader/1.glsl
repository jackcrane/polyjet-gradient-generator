uniform float u_time; // Uniform to pass the current time

const float rands[1000] = float[1000](0.63,0.08,0.82,0.86,0.42,0.63,0.89,0.86,0.42,0.51,0.68,0.26,0.46,0.56,0.56,0.10,0.35,0.72,0.37,0.39,0.02,0.18,0.00,0.63,0.32,0.26,0.60,0.79,0.18,0.84,0.52,0.39,0.58,0.75,0.62,0.85,0.77,0.70,0.02,0.08,0.38,0.74,0.26,0.30,0.17,0.56,0.58,0.42,0.47,0.78,0.67,0.48,0.19,0.72,0.16,0.42,0.23,0.16,0.93,0.83,0.32,0.27,0.41,0.66,0.71,0.07,0.82,0.77,0.59,0.18,0.87,0.55,0.47,0.48,0.60,0.96,0.42,0.22,0.04,0.23,0.13,0.32,0.34,0.74,0.72,0.15,0.62,0.70,0.68,0.13,0.88,0.73,0.35,0.11,0.77,0.21,0.93,0.71,0.21,0.51,0.84,0.88,0.70,0.71,0.36,0.98,0.02,0.86,0.71,0.77,0.83,0.12,0.33,0.43,0.37,0.02,0.03,0.60,0.91,0.47,0.06,0.13,0.71,0.74,0.94,0.41,0.22,0.77,0.70,0.82,0.63,0.94,0.40,0.03,0.30,1.00,0.20,0.61,0.74,0.72,0.51,0.75,0.43,0.32,0.21,0.53,0.02,0.67,0.02,0.65,0.24,0.14,0.92,0.42,0.60,0.98,0.52,0.02,0.00,0.46,0.31,0.64,0.17,0.13,0.05,0.21,0.37,0.40,0.61,0.05,1.00,0.86,0.07,0.83,0.74,0.73,0.71,0.82,0.03,1.00,0.84,0.08,0.11,0.00,0.09,0.79,0.70,0.55,0.38,0.57,0.06,0.38,0.74,0.00,0.30,0.73,0.86,0.43,0.63,0.58,0.46,0.90,0.10,0.55,0.85,0.43,0.31,0.15,0.68,0.76,0.58,0.64,0.15,0.71,0.38,0.08,0.22,0.63,0.53,0.77,0.07,0.40,0.91,0.56,0.56,0.76,0.44,0.28,0.65,0.47,0.49,0.96,0.20,0.77,0.12,0.60,0.75,0.42,0.94,0.04,0.25,0.61,0.97,0.94,0.29,0.58,0.90,0.62,0.83,0.18,0.64,0.29,0.57,0.51,0.71,0.43,0.86,0.92,0.71,0.56,0.16,0.28,0.24,0.01,0.24,0.33,0.44,0.73,0.08,0.06,0.97,0.34,0.47,0.33,0.88,0.98,0.72,0.77,0.93,0.31,0.79,0.90,0.60,0.20,0.46,0.92,0.80,0.21,0.24,0.60,0.46,0.72,0.46,0.82,0.85,1.00,0.22,0.24,0.50,0.77,0.57,0.01,0.76,0.40,0.61,0.15,0.26,0.61,0.58,0.76,0.72,0.49,0.59,0.75,0.05,0.65,0.18,0.29,0.03,0.70,0.68,0.58,0.23,0.02,0.52,0.18,0.08,0.45,0.06,0.40,0.81,0.46,0.54,0.25,0.22,0.56,0.65,0.11,0.70,0.72,0.15,0.54,0.25,0.24,0.47,0.10,0.32,0.71,0.01,0.34,0.00,0.55,0.09,0.62,0.59,0.42,0.00,0.23,0.33,0.17,0.26,0.84,0.14,0.61,0.15,0.46,0.51,0.01,0.68,0.54,0.96,0.98,0.70,0.79,0.71,0.12,0.05,0.70,0.60,0.92,0.77,0.61,0.35,0.72,0.17,0.64,0.45,0.27,0.21,0.68,0.89,0.99,0.05,0.47,0.40,0.25,0.75,0.73,0.20,0.24,0.50,0.16,0.19,0.08,0.65,0.22,0.44,0.11,0.86,0.40,0.44,0.26,0.20,0.13,0.78,0.85,0.99,0.09,0.46,0.58,0.62,0.00,0.49,0.11,0.94,0.08,0.34,0.40,0.01,0.68,0.62,0.78,0.34,1.00,0.24,0.04,0.07,0.92,0.29,0.82,0.29,0.96,0.56,0.18,0.14,0.84,0.84,0.17,0.10,0.26,0.71,0.35,0.54,0.83,0.52,0.92,0.60,0.67,0.96,0.68,0.47,0.89,0.81,0.86,1.00,0.37,0.76,0.61,0.99,0.80,0.65,0.05,0.60,0.85,0.49,0.31,0.49,0.55,0.76,0.19,0.93,0.91,0.63,0.30,0.80,0.56,0.50,0.37,0.89,0.20,0.86,0.27,0.04,0.46,0.98,0.85,0.37,0.72,0.87,0.55,1.00,0.16,0.60,0.85,0.52,0.41,0.65,0.09,0.82,0.90,0.21,0.97,0.56,0.72,1.00,0.65,0.09,0.50,0.14,0.41,0.27,0.46,0.45,0.35,0.87,0.09,0.43,0.93,0.46,0.28,0.99,0.50,0.00,0.69,0.32,0.24,0.10,0.70,0.73,0.77,0.05,0.91,0.52,0.39,0.21,0.49,0.90,0.92,0.17,0.63,0.21,0.50,0.50,0.92,0.47,0.23,0.87,0.76,0.15,0.71,0.32,0.70,0.56,0.55,0.24,0.09,0.74,0.86,0.92,0.15,0.13,0.27,1.00,0.83,0.68,0.25,0.75,0.65,0.71,0.23,0.98,0.29,0.68,0.94,0.95,0.93,1.00,0.63,0.03,0.34,0.83,0.92,0.93,0.31,0.05,0.89,0.29,0.29,0.35,0.05,0.45,0.85,0.56,0.18,0.11,0.14,0.14,0.21,0.45,0.31,0.84,0.85,0.19,0.31,0.31,0.97,0.57,0.39,0.43,0.49,0.09,0.37,0.83,0.01,0.78,0.36,0.51,0.14,0.84,0.43,0.24,0.73,0.71,0.16,0.53,0.23,0.61,0.70,0.73,0.67,0.31,0.24,0.40,0.00,0.58,0.80,1.00,0.61,0.23,0.59,0.88,0.58,0.58,0.01,0.86,0.67,0.28,0.69,0.22,0.85,0.20,0.56,0.14,0.43,0.58,0.05,0.95,0.33,0.64,0.21,0.60,0.68,0.48,0.12,0.41,0.20,0.50,0.41,0.01,0.57,0.84,0.41,0.78,0.94,0.94,0.14,0.85,0.77,0.45,0.58,0.76,0.69,0.22,0.50,0.25,0.51,0.42,0.15,0.82,0.75,0.48,0.45,0.59,0.52,0.10,0.29,0.15,0.91,0.14,0.90,0.91,0.66,0.48,0.88,0.42,0.13,0.10,0.24,0.48,0.66,0.43,0.56,0.45,0.67,0.80,0.00,0.24,0.61,0.33,0.57,0.98,0.30,0.96,0.82,0.83,0.34,0.57,0.15,0.90,0.20,0.72,0.71,0.15,0.10,0.73,0.09,0.80,0.59,0.96,0.55,0.35,0.14,0.46,0.23,0.59,0.35,0.48,0.69,0.86,0.17,0.26,0.68,0.84,0.78,0.80,0.01,0.23,0.64,0.49,0.56,0.74,0.93,0.71,0.04,0.51,0.88,0.71,0.93,0.08,0.97,0.90,0.89,0.45,0.78,0.86,0.35,0.64,0.05,0.45,0.96,0.24,0.83,0.42,0.41,0.19,0.87,0.96,0.99,0.17,0.73,0.40,0.75,0.34,0.30,0.81,0.67,0.93,0.39,0.50,0.23,0.69,0.08,0.12,0.94,0.54,0.62,0.34,0.50,0.57,0.04,0.73,0.65,0.27,0.84,0.66,0.32,0.33,0.79,0.23,0.59,0.52,0.84,0.72,0.51,0.04,0.77,0.09,0.56,0.12,0.07,0.64,0.14,0.13,0.09,0.48,0.84,0.11,0.78,0.17,0.19,0.06,0.58,0.37,0.06,0.55,0.97,0.18,0.31,0.37,0.14,0.43,0.32,0.17,0.67,0.48,0.47,0.55,0.42,0.70,0.81,0.74,0.94,0.31,0.32,0.06,0.51,0.77,0.97,0.03,0.94,0.91,0.62,0.90,0.15,0.26,0.30,0.57,0.38,0.99,0.51,0.30,0.57,0.34,0.60,0.02,0.43,0.72,0.53,0.85,0.90,0.81,0.49,0.76,0.34,0.49,0.33,0.93,0.75,0.27,0.49,0.15,0.02,0.07,0.59,0.02,0.52,0.59,0.46,0.83,0.50,0.54,0.32,0.95,0.45,0.19,0.15,0.24,0.77,0.72,0.34,0.95,0.56,0.32,0.81,0.03,0.15,0.40,0.39,0.47,0.30,0.93,0.03,0.67,0.35,0.76,0.59,0.38,0.58,0.44,0.29,0.36,0.45,0.91,0.51,0.26,0.29,0.08,0.26,0.10,0.55,0.52,0.33,0.48,0.10,0.79,0.82,0.94,0.05,0.35,0.11,0.73,0.08,0.30,0.80,0.45,0.03,0.63,0.65,0.14,0.50,0.97,0.83,0.03,0.76,0.00,0.66,0.76,0.12,1.00,0.21,0.17,0.28,0.65,0.13,0.77,0.94,0.34,0.33,0.08,0.25);
vec3 WHITE = vec3(255.0/255.0, 255.0/255.0, 255.0/255.0); // 255, 255, 255
vec3 CLEAR = vec3(227.0/255.0, 233.0/255.0, 253.0/255.0); // 227, 233, 253
vec3 MAGENTA = vec3(198.0/255.0, 0, 88.0/255.0); // 198, 0, 88
vec3 YELLOW = vec3(240.0/255.0, 197.0/255.0, 0); // 240,197,0
vec3 CYAN = vec3(0, 137.0/255.0, 166.0/255.0); //0,137,166
vec3 VOID = vec3(0, 0, 0); // 0, 0, 0

float rand(vec2 co) {
  float index = co.x * co.y + iTime;
  return rands[int(mod(index, 1000.0))];
}
float rand(float co) {
  return rands[int(mod(co + iTime, 1000.0))];
}
float rand(vec2 co, float offset) {
  float index = co.x * co.y + offset + iTime;
  return rands[int(mod(index, 1000.0))];
}

/*
* Converts a hue value to a CMY color
* @param hue The hue value to convert. Must be in the range [0, 360]
*/
vec3 hueToCMY(float hue) {
  float c = 0.0;
  float m = 0.0;
  float y = 0.0;

  if(hue < 60.0) {
    c = 0.0;
    m = ((60.0 - hue) / 60.0) * 0.5;
    y = 1.0 - m;
  } else if(hue < 180.0) {
    m = 0.0;
    y = (180.0 - hue) / 120.0;
    c = 1.0 - y;
  } else if(hue < 300.0) {
    c = (300.0 - hue) / 120.0;
    m = 1.0 - c;
    y = 0.0;
  } else {
    m = (420.0 - hue) / 120.0;
    y = 1.0 - m;
    c = 0.0;
  }

  return vec3(c, m, y);
}

vec3 randomizeBlack() {
  float randomThreshold = rand(gl_FragCoord.xy, 3.0);
  if (randomThreshold < 0.33) {
    return CYAN;
  } else if (randomThreshold < 0.66) {
    return MAGENTA;
  } else {
    return YELLOW;
  }
}

/*
* Corrects the color into the polyjet hardcode color key
* @param cmy The CMY color to correct
* @param saturation The saturation (inverse of the amount of white in the color), in the range [0, 1]
* @param value The value (inverse of the amount of black in the color), in the range [0, 1]
*/
vec3 correctColor(vec3 cmy, float saturation, float value) {
  float whiteThreshold = rand(gl_FragCoord.xy);
  if(whiteThreshold > saturation) {
    float blackThreshold = rand(gl_FragCoord.xy, 1.0);
    if(blackThreshold > value) {
      return randomizeBlack();
    } else {
      return WHITE; // White
    }
  }

  float colorThreshold = rand(gl_FragCoord.xy, 2.0);
  if(colorThreshold < cmy[0]) {
    return CYAN;
  } else if(colorThreshold < cmy[0] + cmy[1]) {
    return MAGENTA;
  } else {
    return YELLOW;
  }

  return cmy; // Original color
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Normalized pixel coordinates (from 0 to 1)
  vec2 uv = fragCoord / iResolution.xy;

  // Center the coordinates
  vec2 centeredUV = uv - vec2(0.5, 0.5);

  // Convert to polar coordinates
  float angle = atan(centeredUV.y, centeredUV.x);
  float radius = length(centeredUV);

  float angleInDegrees = degrees(angle) + 180.0;

  // Normalize the angle to the range [0, 1]
  float normalizedAngle = angleInDegrees / 360.0;

  if (radius > 0.5) {
    discard;
  }

  // Convert from the hue circle stored in the angle to RGB
  vec3 cmy = hueToCMY(normalizedAngle * 360.0);

  // vec3 correctedColor = correctColor(cmy, 1.0, radius * 2.0);
  vec3 correctedColor = correctColor(cmy, radius * 2.0, 0.0);

  fragColor = vec4(correctedColor, 1.0);
}